// Generated by CIRCT firtool-1.62.0
module fwft_sync_fifo_8(
  input          clock,
                 reset,
                 io_fifo_wio_wen,
  input  [256:0] io_fifo_wio_wdata,
  output         io_fifo_wio_full,
  input          io_fifo_rio_ren,
  output [256:0] io_fifo_rio_rdata,
  output         io_fifo_rio_empty
);

  reg  [3:0]        vaild_data;
  reg  [2:0]        w_addr;
  reg  [2:0]        r_addr;
  reg  [256:0]      memory_0;
  reg  [256:0]      memory_1;
  reg  [256:0]      memory_2;
  reg  [256:0]      memory_3;
  reg  [256:0]      memory_4;
  reg  [256:0]      memory_5;
  reg  [256:0]      memory_6;
  reg  [256:0]      memory_7;
  wire [7:0][256:0] _GEN =
    {{memory_7},
     {memory_6},
     {memory_5},
     {memory_4},
     {memory_3},
     {memory_2},
     {memory_1},
     {memory_0}};
  wire              io_fifo_wio_full_0 = vaild_data == 4'h8;
  wire              r_en = io_fifo_rio_ren & ((|vaild_data) | io_fifo_wio_wen);
  wire              w_en = io_fifo_wio_wen & (~io_fifo_wio_full_0 | io_fifo_rio_ren);
  wire [256:0]      _GEN_0 = _GEN[w_addr];
  wire [1:0]        _GEN_1 = {w_en, r_en};
  always @(posedge clock) begin
    if (reset) begin
      w_addr <= 3'h0;
      r_addr <= 3'h0;
      vaild_data <= 4'h0;
    end
    else begin
      if (w_en)
        w_addr <= w_addr + 3'h1;
      if (r_en)
        r_addr <= r_addr + 3'h1;
      if (_GEN_1 == 2'h1)
        vaild_data <= vaild_data - 4'h1;
      else if (_GEN_1 == 2'h2)
        vaild_data <= vaild_data + 4'h1;
    end
    if (w_addr == 3'h0) begin
      if (w_en)
        memory_0 <= io_fifo_wio_wdata;
      else
        memory_0 <= _GEN_0;
    end
    if (w_addr == 3'h1) begin
      if (w_en)
        memory_1 <= io_fifo_wio_wdata;
      else
        memory_1 <= _GEN_0;
    end
    if (w_addr == 3'h2) begin
      if (w_en)
        memory_2 <= io_fifo_wio_wdata;
      else
        memory_2 <= _GEN_0;
    end
    if (w_addr == 3'h3) begin
      if (w_en)
        memory_3 <= io_fifo_wio_wdata;
      else
        memory_3 <= _GEN_0;
    end
    if (w_addr == 3'h4) begin
      if (w_en)
        memory_4 <= io_fifo_wio_wdata;
      else
        memory_4 <= _GEN_0;
    end
    if (w_addr == 3'h5) begin
      if (w_en)
        memory_5 <= io_fifo_wio_wdata;
      else
        memory_5 <= _GEN_0;
    end
    if (w_addr == 3'h6) begin
      if (w_en)
        memory_6 <= io_fifo_wio_wdata;
      else
        memory_6 <= _GEN_0;
    end
    if (&w_addr) begin
      if (w_en)
        memory_7 <= io_fifo_wio_wdata;
      else
        memory_7 <= _GEN_0;
    end
  end // always @(posedge)
  assign io_fifo_wio_full = io_fifo_wio_full_0;
  assign io_fifo_rio_rdata = (|vaild_data) ? _GEN[r_addr] : io_fifo_wio_wdata;
  assign io_fifo_rio_empty = ~(|vaild_data);
endmodule

