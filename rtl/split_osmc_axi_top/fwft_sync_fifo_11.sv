// Generated by CIRCT firtool-1.62.0
module fwft_sync_fifo_11(
  input        clock,
               reset,
               io_fifo_wio_wen,
  input  [9:0] io_fifo_wio_wdata,
  input        io_fifo_rio_ren,
  output [9:0] io_fifo_rio_rdata,
  output       io_fifo_rio_empty
);

  reg  [2:0]      vaild_data;
  reg  [1:0]      w_addr;
  reg  [1:0]      r_addr;
  reg  [9:0]      memory_0;
  reg  [9:0]      memory_1;
  reg  [9:0]      memory_2;
  reg  [9:0]      memory_3;
  wire [3:0][9:0] _GEN = {{memory_3}, {memory_2}, {memory_1}, {memory_0}};
  wire            r_en = io_fifo_rio_ren & ((|vaild_data) | io_fifo_wio_wen);
  wire            w_en = io_fifo_wio_wen & (vaild_data != 3'h4 | io_fifo_rio_ren);
  wire [9:0]      _GEN_0 = _GEN[w_addr];
  wire [1:0]      _GEN_1 = {w_en, r_en};
  always @(posedge clock) begin
    if (reset) begin
      w_addr <= 2'h0;
      r_addr <= 2'h0;
      vaild_data <= 3'h0;
    end
    else begin
      if (w_en)
        w_addr <= w_addr + 2'h1;
      if (r_en)
        r_addr <= r_addr + 2'h1;
      if (_GEN_1 == 2'h1)
        vaild_data <= vaild_data - 3'h1;
      else if (_GEN_1 == 2'h2)
        vaild_data <= vaild_data + 3'h1;
    end
    if (w_addr == 2'h0) begin
      if (w_en)
        memory_0 <= io_fifo_wio_wdata;
      else
        memory_0 <= _GEN_0;
    end
    if (w_addr == 2'h1) begin
      if (w_en)
        memory_1 <= io_fifo_wio_wdata;
      else
        memory_1 <= _GEN_0;
    end
    if (w_addr == 2'h2) begin
      if (w_en)
        memory_2 <= io_fifo_wio_wdata;
      else
        memory_2 <= _GEN_0;
    end
    if (&w_addr) begin
      if (w_en)
        memory_3 <= io_fifo_wio_wdata;
      else
        memory_3 <= _GEN_0;
    end
  end // always @(posedge)
  assign io_fifo_rio_rdata = (|vaild_data) ? _GEN[r_addr] : io_fifo_wio_wdata;
  assign io_fifo_rio_empty = ~(|vaild_data);
endmodule

