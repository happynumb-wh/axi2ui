// Generated by CIRCT firtool-1.62.0
module fwft_sync_fifo_2(
  input          clock,
                 reset,
                 io_fifo_wio_wen,
  input  [288:0] io_fifo_wio_wdata,
  output         io_fifo_wio_full,
  input          io_fifo_rio_ren,
  output [288:0] io_fifo_rio_rdata,
  output         io_fifo_rio_empty
);

  reg  [4:0]         vaild_data;
  reg  [3:0]         w_addr;
  reg  [3:0]         r_addr;
  reg  [288:0]       memory_0;
  reg  [288:0]       memory_1;
  reg  [288:0]       memory_2;
  reg  [288:0]       memory_3;
  reg  [288:0]       memory_4;
  reg  [288:0]       memory_5;
  reg  [288:0]       memory_6;
  reg  [288:0]       memory_7;
  reg  [288:0]       memory_8;
  reg  [288:0]       memory_9;
  reg  [288:0]       memory_10;
  reg  [288:0]       memory_11;
  reg  [288:0]       memory_12;
  reg  [288:0]       memory_13;
  reg  [288:0]       memory_14;
  reg  [288:0]       memory_15;
  wire [15:0][288:0] _GEN =
    {{memory_15},
     {memory_14},
     {memory_13},
     {memory_12},
     {memory_11},
     {memory_10},
     {memory_9},
     {memory_8},
     {memory_7},
     {memory_6},
     {memory_5},
     {memory_4},
     {memory_3},
     {memory_2},
     {memory_1},
     {memory_0}};
  wire               io_fifo_wio_full_0 = vaild_data == 5'h10;
  wire               r_en = io_fifo_rio_ren & ((|vaild_data) | io_fifo_wio_wen);
  wire               w_en = io_fifo_wio_wen & (~io_fifo_wio_full_0 | io_fifo_rio_ren);
  wire [288:0]       _GEN_0 = _GEN[w_addr];
  wire [1:0]         _GEN_1 = {w_en, r_en};
  always @(posedge clock) begin
    if (reset) begin
      w_addr <= 4'h0;
      r_addr <= 4'h0;
      vaild_data <= 5'h0;
    end
    else begin
      if (w_en)
        w_addr <= w_addr + 4'h1;
      if (r_en)
        r_addr <= r_addr + 4'h1;
      if (_GEN_1 == 2'h1)
        vaild_data <= vaild_data - 5'h1;
      else if (_GEN_1 == 2'h2)
        vaild_data <= vaild_data + 5'h1;
    end
    if (w_addr == 4'h0) begin
      if (w_en)
        memory_0 <= io_fifo_wio_wdata;
      else
        memory_0 <= _GEN_0;
    end
    if (w_addr == 4'h1) begin
      if (w_en)
        memory_1 <= io_fifo_wio_wdata;
      else
        memory_1 <= _GEN_0;
    end
    if (w_addr == 4'h2) begin
      if (w_en)
        memory_2 <= io_fifo_wio_wdata;
      else
        memory_2 <= _GEN_0;
    end
    if (w_addr == 4'h3) begin
      if (w_en)
        memory_3 <= io_fifo_wio_wdata;
      else
        memory_3 <= _GEN_0;
    end
    if (w_addr == 4'h4) begin
      if (w_en)
        memory_4 <= io_fifo_wio_wdata;
      else
        memory_4 <= _GEN_0;
    end
    if (w_addr == 4'h5) begin
      if (w_en)
        memory_5 <= io_fifo_wio_wdata;
      else
        memory_5 <= _GEN_0;
    end
    if (w_addr == 4'h6) begin
      if (w_en)
        memory_6 <= io_fifo_wio_wdata;
      else
        memory_6 <= _GEN_0;
    end
    if (w_addr == 4'h7) begin
      if (w_en)
        memory_7 <= io_fifo_wio_wdata;
      else
        memory_7 <= _GEN_0;
    end
    if (w_addr == 4'h8) begin
      if (w_en)
        memory_8 <= io_fifo_wio_wdata;
      else
        memory_8 <= _GEN_0;
    end
    if (w_addr == 4'h9) begin
      if (w_en)
        memory_9 <= io_fifo_wio_wdata;
      else
        memory_9 <= _GEN_0;
    end
    if (w_addr == 4'hA) begin
      if (w_en)
        memory_10 <= io_fifo_wio_wdata;
      else
        memory_10 <= _GEN_0;
    end
    if (w_addr == 4'hB) begin
      if (w_en)
        memory_11 <= io_fifo_wio_wdata;
      else
        memory_11 <= _GEN_0;
    end
    if (w_addr == 4'hC) begin
      if (w_en)
        memory_12 <= io_fifo_wio_wdata;
      else
        memory_12 <= _GEN_0;
    end
    if (w_addr == 4'hD) begin
      if (w_en)
        memory_13 <= io_fifo_wio_wdata;
      else
        memory_13 <= _GEN_0;
    end
    if (w_addr == 4'hE) begin
      if (w_en)
        memory_14 <= io_fifo_wio_wdata;
      else
        memory_14 <= _GEN_0;
    end
    if (&w_addr) begin
      if (w_en)
        memory_15 <= io_fifo_wio_wdata;
      else
        memory_15 <= _GEN_0;
    end
  end // always @(posedge)
  assign io_fifo_wio_full = io_fifo_wio_full_0;
  assign io_fifo_rio_rdata = (|vaild_data) ? _GEN[r_addr] : io_fifo_wio_wdata;
  assign io_fifo_rio_empty = ~(|vaild_data);
endmodule

